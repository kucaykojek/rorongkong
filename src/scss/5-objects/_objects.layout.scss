// ==========================================================================
// Responsive Layout Object
// ==========================================================================

// Here we set a variable assuming that default and module settings
// are not set globally. If they have been previously been defined,
// the following variable will be overriden and will be set to `true`.
$imported-core-settings: false !default;

@if ($imported-core-settings == false) {
  @warn 'Oops! Have you included core settings file?';
}

// Default/mandatory classes.
// ==========================================================================
//
// 1. Allows us to use the layout object on any type of element.
// 2. We need to defensively reset any box-model properties.
// 3. Use the negative margin trick for multi-row grids:
//    http://csswizardry.com/2011/08/building-better-grid-systems/
//
.#{$global-object-namespace}layout {
  @include clearfix;

  display: block; // 1
  margin: 0; // 2
  padding: 0; // 2
  list-style: none; // 1
  margin-left: rem-calc(-$global-spacing-unit); // 3
}


//
// 1. Allows us to use the layout object on any type of element.
// 2. By default, all layout items are full-width (mobile first).
// 3. Gutters provided by left padding.
//
.#{$global-object-namespace}layout__item {
  display: block; // 1
  width: 100%; // 2
  padding-left: rem-calc($global-spacing-unit); // 3
  float: left;
}
